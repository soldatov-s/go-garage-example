// Package apiv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package apiv1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xX0W/bthP+Vwj+fo+S5WbZgOppbqy2xjInc9ynIhho8SyzkEiGPMUxDP3vAylpsiMl",
	"9UPnDttebIl3930n3ndHaU9TVWglQaKl8Z7adAMF85dThmwBtszR3WmjNBgU4G3mz/X/G1jTmP4v6nCi",
	"BiRKpMAdraqA4k4DjalafYEUaRXQ2tTDTRUH99/4WzRCZjSgT6FiWoTOnIEM4QkNC5FlPoivaFxHOqrU",
	"AEPgvzOf3lqZwl1RzhBCFAXQYAA9U2GzOC/zfFm7nUDacTlqDjmci/qAy1ELfkQpJP502dEJiZCBOQlY",
	"cA9YALKDSjSV6yf8q/M7BdcDOuRS87MV6ICrGtahMcpMpN32tQjO9FWJt/HvFH9J6kcuJ0reqwmZyO2g",
	"zSLD0l4dh7ZVHsyi7uThJ+26+RlRH8hrTa5VnblElvo4KJjIXWCptTL4M4LFkfuhAZWscAiT2xm5q800",
	"oKVx7htEbeMo6tz9c9vUCI1CSRrT5UZYIixhhKu0LEAicxai1iRTITyxQudAtBGPDIE4ksc3NKC5SEFa",
	"vzstv2bpBsjFaHxEH0fRdrsdMW8dKZNFTaiNrmdXyfwuCS9G49EGi9wlh2AKe7O+A/MoUugw7JZlGZiR",
	"UJF3iZyKBebO5bU8H8HY+kEdutIgmRY0pj+MxiNn1ww3vkZ+j3zpVP1/vE1XfhIRN7PJRyZ57rvdFdlv",
	"14zTmN4qi53NwEMJFltRumKC9MhM61ykPi76Yh18ey6cOvB7VXR5NZzCAKcxmhIqt2C1cpvtkC/G42+W",
	"ycHh9VI6VUAvvyFjN0kGCN9NpmSR/PYpuVvWvG/Pw3u1SCbLhEwnywl5P5ldJ1Pf1LYsCmZ2bXttalGQ",
	"+jgjEraEs2ast8O1kUu4UnwXNi3lnRyeF2e0F7yqlemOpr5Gp37dQ5PVjsymPYXWHp1GNTOsAARjafz5",
	"OZyPF+7KNUk3aATvKS042MuvnZFVFTxn+sgMJ7zLPiBiTeChZDnx6K1twwxvc3oowey6pBpTl0bDulIq",
	"ByZpVd3/hd1wMPwHRHLzy/fthcvz8M5vluT9zaf51LfDa31Ql9PWSl0rQxrxA3eirQKawcAI/gD4mrY/",
	"AH5vYd//iwfu305kGSAKmb0ssuGD/rZsVIaKpP6NZlhu7rBfqivn8U+W3X+TbUB0Af3xXI88my+TxXxy",
	"TZLF4mbxmt51T7h90ftwMI+tQI9e0/dCV/HefT9UEdMiqt+fmRFsldfCErrulzXznzM0VynLN8p/hYAs",
	"Cxp/Pli79z1m8Djm7Zvx+MDd395XVXVf/REAAP//lVFYWCsRAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

