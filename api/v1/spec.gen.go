// Package apiv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package apiv1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXUW/bNhD+KwS3p0Ky3CwbUD3NjdXWWOZkjvtUBAMtnmUWEsmQJ7tGoP8+kJImO1JS",
	"P2zusO3JMu/u+468747SI01VoZUEiZbGj9SmGyiYf5wyZAuwZY7unzZKg0EB3mb+XP/ewJrG9Luow4ka",
	"kCiRAve0qgKKew00pmr1GVKkVUBrUw83VRzcb+Nv0QiZ0YB+CRXTInTmDGQIX9CwEFnmg/iKxnWko0oN",
	"MAT+O/PprZUp3BPlDCFEUQANBtAzFTaL8zLPl7XbCaQdl6PmkMO5qA+4HLXgR5RC4k+XHZ2QCBmYk4AF",
	"94AFIDuoRFO5fsK/Or9TcD2gQy41P1uBDriqYR0ao8xE2l1fi+BMX5V4G/9W8eekfuRyouS9mpCJ3A7a",
	"LDIs7dVxaFvlwSzqTh7eadfNT4j6QF5rcq3qzCWy1MdBwUTuAkutlcGfd8zyEW5pQCUrXPzkdkbuaiMN",
	"aGmc8wZRx1HU+vot29QIjUJJGtPlRlgiLGGEq7QsQCJzFqLWJFOh4JpoI7YMgTj07Wsa0FykIK0/lJZY",
	"s3QD5GI07vHudiPmrSNlsqgJtdH17CqZ3yXhxWg82mCRu8QQTGFv1ndgtiKFDsPuWJaBGQkVeZfIiVdg",
	"7lyey3ELxtYbdMhKg2Ra0Jj+MBqPnF0z3PiyRAi2nr2q/j0+nis/fIgb0+QDkzz3De7q6o9pxmlMb5XF",
	"zmbgoQSLrQ5d/UB65FfRq276nzrWewVzqTQ0wgCnMZoSKrdgtXJn65AvxuMn5EzrXKQ+6eizdUinZnJw",
	"RT2XThXQy7+QsZsXA4RvJ1OySH77mNwta9435+G9WiSTZUKmk+WEvJvMrpOpb11bFgUz+7aTNrUOSH1p",
	"EQk7wlkzvNsR2igkXCm+D5sO8k4Oz+sxehS8qsXoLqC+LKd+3UOT1Z7Mpj1R1h6dLDUzrAAEY2n86Smc",
	"jxfuyfVFN1AE7yktODjLr92EVRU8ZfrADCe8yz4gYk3goWQ58eitbcMMb3N6KMHsu6QaU5dGw7pSKgcm",
	"aVXd/43dcDDiB0Ry88u37YXL8/DOb5bk3c3H+dS3w0t9UJfT1kpdK0Ma8QN3oq0CmsHA1H0P+JK23wN+",
	"a2Hf/4cH7j9OZBkgCpk9L7Lhu/22bFSGiqT+BWZYbu5+X6or5/Fvlt3/k21AdAH98Vxbns2XyWI+uSbJ",
	"YnGzeEnvuifcvuh9OJhtK9Cjt/JHoav40X0nVBHTIqpfmZkRbJXXwhK67pc18x8tNFcpyzeujQIKsixo",
	"/Olg7d73mMHjmDevx+MDd//3vqqq++qPAAAA///kpispEREAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

